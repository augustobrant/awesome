/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 Link√∂ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome;

use custom.awesome.connectors;

private alias SnapperArray = Snapper{};

public class AweEasySnapper extends Snapper : abstract {
    public aweDynamicContract {
        aweDynamic void realign(SnapperArray visited=null);
    }

    public AweConnectorCache connectorCache();

    public constructor() { 
        this.configurator = this.createConfigurator();
        this.product = this.createProduct(this.configurator);

        this.refresh();
    }

    public AweProduct product;
    extend public AweProduct createProduct(AweObject configurator) : abstract { }

    public AweObject configurator;
    extend public AweObject createConfigurator() : abstract { }

    extend public void connectors(AweConnectorCache cc) { }

    public void connectors(ConnectorCollection collection) { 
        this.connectorCache.clearBuffer();
        
        this.connectors(connectorCache);
        
        this.connectorCache.addToConnectors(collection);

        super(collection);
    }

    public bool buildQuickProperties(QuickProperties props) { 
        if (this.configurator) {
            return this.configurator.buildQuickProperties(..);
        }

        return super(..);
    }

    public void drawGraphs(LayerBuffer lb, View view, GeometricFinder finder=null) {
        if (this.product) {
            if (Graph graph = this.product.get2D()) { 
                graph.draw(lb);
            }
        }
    }

    public Primitive3D get3D(FetchEnv3D env) {
        if (this.product) {
            return this.product.get3D(env);
        }

        Box3D prim(this.localBound());

        prim.setMaterial(plainGreenMaterial3D);

        return prim;
    }

    public bool quickPropertyChanged(QuickProperties props, str key, Object value, bool testChangeOnly) {
        if (this.configurator and !testChangeOnly) {
            bool changed = this.configurator.quickPropertyChanged(..);
            
            this.refresh(true, true);
            
            return changed;
        }

        return super(..);
    }

    public box localBound() {
        if (this.product) {
            return this.product.localBound();
        }

        return box();
    }

    public void connected(Connector c0, Connector c1, bool snapped, bool attached) {
        this.refresh(true);

        super(..);
    }

    public void disconnected(Connector c0, Connector c1, bool wasSnapped, bool wasAttached) {
        this.refresh(true);

        super(..);
    }

    public void dropped() {
        super();

        this.refresh(true);
    }

    /**
     * Loops through all connected snappers and try to realign them just like 
     * (re)alignAllSnapped would do except it will check individually if that
     * connector should realign (realign property of the connector)
     * It also triggers realign on all connected snappers that have the realign method 
     */
    extend public void realign(Snapper{} visited=null) {
        if (!visited) {
            visited = {Snapper: this};
        }
        else {
            if (this in visited) return;
            
            visited << this;
        }

        for (attach in this.connectors()) {
            var realign = aweDynamicCall attach.shouldRealign();
            var connections = attach.connections() ? attach.connections() : {Connector: attach.connection()};

            if (realign.bool and connections != null) {
                for (connection in connections) if(connection) {
                    alignConnectors(connection, attach, visited=null, invalidate3D=false, removeFromBsp=false, tryRealign=true, forcePropagate=false);
                    
                    var snapper = connection.snapper;
                    
                    aweDynamicCall snapper.realign(visited);
                }
            }
        }
    }

    extend public void refresh(bool updateConnectors=false, bool tryAlignAllSnapped=false) {
        this.product.?refresh();
        
        if (updateConnectors)  this.updateConnectors();
        if (tryAlignAllSnapped) this.realign(null);        

        invalidateQuickPropertiesFor(this);
        invalidate();
        space.invalidateSelection();
    }
}