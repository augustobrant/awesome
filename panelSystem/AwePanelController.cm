/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 Link√∂ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome.panelSystem;

public class AwePanelController extends Snapper {

    public AweMPC<AwePanelModel, AwePanelProduct>;

    private DistanceEnum widths(24inch, 30inch, 36inch, 42inch, 48inch, 54inch, 60inch);
    private DistanceEnum heights(30inch, 42inch, 54inch, 66inch);

    //tiles
    private StrSubSet panelTypes([str: "Monolithic", "Segmented"]);
    private str panelType;
    //always visible
    private AwePanelTileModel sideABottomTile();
    private AwePanelTileModel sideBBottomTile();

    //only when Segmented
    private AwePanelTileModel sideATopTile();
    private AwePanelTileModel sideBTopTile();


    extend private void modelUpdated() {
        this.alignAllSnapped(tryRealign=false);
        invalidate();
        space.invalidateSelection();
    }


    private AweConnectorCache _cc();

    public void connectors(ConnectorCollection coll) {
        coll << _cc.get("p0", this, model.centerline.p0.point, orientation(180deg), ctAlways);
        coll << _cc.get("p1", this, model.centerline.p1.point, orientation(0deg), ctAlways);
    }

    public box localBound() {
        rect r(
                (0, -model.frameThickness /2),
                (model.centerline.length, model.frameThickness /2)
            );
        return box(r, 0, model.height);
    }


    public constructor() {
        initProps();
        super(..);
    }   

    extend private void initProps() {
        propChanged("width", 42inch);
        propChanged("height", 60inch);
        propChanged("panelType", "Monolithic");
    }

   
    public bool buildQuickProperties(QuickProperties props) { 
        props.append("width", "Width", distance(model.centerline.length), widths);
        props.append("height", "Height", distance(model.height), heights);
        props.append("panelType", "Panel Type", panelType, panelTypes);
        return true;
    }

    public bool quickPropertyChanged(QuickProperties props, str key, Object value, bool testChangeOnly) {
        if (key and !testChangeOnly) {
           propChanged(key, value);
        }
        return true;
    }

    public bool neighborChanged(Snapper neighbor, Snapper{} visited) {
        if(this in space.selection)
            groupChanged(neighbor);
        return super(..);
    }

    extend private void groupChanged(Snapper changeTrigger) {
        if(changeTrigger as AwePanelController) {
            propChanged("height", changeTrigger.model.height);
            propChanged("panelType", changeTrigger.panelType);
        }
    }

    extend private void propChanged(str key, Object value) {
        if(key == "width") {
            double newWidth = value.double;

            if(model.centerline.length == newWidth)
                return;

            model.centerline = line2D((0,0), (newWidth, 0));

            adjustTileWidth();
            
        }
        else if(key == "height") {
            double newHeight = value.double;

            if(newHeight == model.height) return;

            model.height = newHeight;

            adjustTileHeights();

            sendChangedToNeighbors();
            
        }
        else if(key == "panelType") {
            str newPanelType = value.toS;

            if(newPanelType == panelType) return;

            panelType = newPanelType;
            
            if(panelType == "Segmented") {
                //order here matters for BOM
                model.tiles = [AwePanelTileModel: sideABottomTile, sideBBottomTile, sideATopTile, sideBTopTile];
            } else {
                model.tiles = [AwePanelTileModel: sideABottomTile, sideBBottomTile];
            }
            adjustTileHeights();
            adjustTileWidth();
            sendChangedToNeighbors();
        }

        modelUpdated();
    }

    private double racewayHeight = 6inch;

    extend private void adjustTileHeights() {
        if(panelType == "Monolithic") {
            sideABottomTile.z = racewayHeight;
            sideABottomTile.height = model.height - racewayHeight;
            sideBBottomTile.z = racewayHeight;
            sideBBottomTile.height = model.height - racewayHeight;
        } else {
            double segmentedBottomTileHeight = 22inch;

            sideABottomTile.z = racewayHeight;
            sideABottomTile.height = segmentedBottomTileHeight;
            sideBBottomTile.z = racewayHeight;
            sideBBottomTile.height = segmentedBottomTileHeight;

            sideATopTile.z = racewayHeight + segmentedBottomTileHeight;
            sideATopTile.height = model.height - racewayHeight - segmentedBottomTileHeight;
            sideBTopTile.z = racewayHeight + segmentedBottomTileHeight;
            sideBTopTile.height = model.height - racewayHeight -segmentedBottomTileHeight;
        }
    }

    extend private void adjustTileWidth() {
        for(t in model.tiles, index=i) {
            //every other tile is a side B tile
            line2D line = i%2==0 ?  model.centerline : model.centerline.flip();
            t.insideBottomLine = line.offset(-model.frameThickness/2);
            t.thickness = .5inch;
            
        }
    }
}

{
    AwePanelController().launch();
}