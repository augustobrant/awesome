/** Configura CET Source Copyright Notice (CETSC)

   This file contains Configura CM source code and is part of the
   Configura CET Development Platform (CETDEV). Configura CM
   is a programming language created by Configura Sverige AB.
   Configura, Configura CET and Configura CM are trademarks of
   Configura Sverige AB. Configura Sverige AB owns Configura CET,
   Configura CM, and CETDEV.

   Copyright (C) 2004 Configura Sverige AB, All rights reserved.

   You can modify this source file under the terms of the Configura CET
   Source Licence Agreement (CETSL) as published by Configura Sverige AB.

   Configura Sverige AB has exclusive rights to all changes, modifications,
   and corrections of this source file. Configura Sverige AB has exclusive
   rights to any new source file containing material from this source file.
   A new source file based on this source file or containing material from
   this source file has to include this Configura CET Source Copyright Notice
   in its full content. All changes, modifications, and corrections mentioned
   above shall be reported to Configura Sverige AB within One Month from
   the date that the modification occurred.

   Configura CM is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the CETSL for more details.

   You should have received a copy of the CETSL along with the CETDEV.
   If not, write to Configura Sverige AB, Box 306, SE-581 02 Link√∂ping, Sweden.
   Tel +46 13377800, Fax +46 13377855,
   Email: info@configura.com, www.configura.com

   END OF CETSC
*/

package custom.awesome.electrical;

public class NodeInfo { 
    
    private double g : public readable;
    private double h : public readable;
    public constructor auto();
    extend public double f() { 
        return g + h;
    }
}

public class Path { 
    public Line route;
    public Path parent;
    private Path child : public readable;
    public constructor() { }
    public constructor auto(route, parent);
    public constructor auto(route);
    private point{} failedRoutes();

    extend public Path newPath(line r) { 
        if (this.child and this.child.route) { 
            this.failedRoutes << this.child.route.v.p1;
        }
        if (r.p1 in this.failedRoutes) { 
            return null; 
        }
        this.child = new Path(r, this);
        return this.child;
    }

    extend public point[] points() { 
        point[] result();
        if (this.route) { 
            result << this.route.v.p0 << this.route.v.p1;
        }
        if (this.child) { 
            var innerPs = this.child.points();
            if (innerPs) { 
                for (p in innerPs) { 
                    result << p;
                }
            }
        }
        return result;
    }
}

public class ClusterInfo { 
    public line l;
    public bool visited;
    public constructor auto(l);
}

public class LineCluster { 
    private ClusterInfo[] lines() : public readable;
    public constructor(line firstLine) { 
        lines << ClusterInfo(firstLine);
    }
    extend public LineCluster operator<<(line l) {
        this.lines << ClusterInfo(l);
        return this;
    }
}

public class AweOptimizedLineNetwork { 
    private str->LineCluster lineIndex() : public readable;
    public constructor(line[] lines) { 
        for (l in lines) { 
            adjustClusterFor(l, l.p0);
            adjustClusterFor(line(l.p1, l.p0), l.p1);
        }
    }

    final private void adjustClusterFor(line l, point p) { 
        var cluster = this.lineIndex.get(getKeyFor(p));
        if (cluster) { 
            cluster << l;
        } else { 
            lineIndex.put(getKeyFor(p), LineCluster(l));
        }
    }

    final private str getKeyFor(point p) { 
        return p.x # p.y # p.z;
    }

    extend public point[] shortestRoute(point start, point end) {

        Path root();
        pln("------------------------------------------------------------------------");
        pln(#start; #end);
        if (this.navigate(start, end, root)) { 
            var r = root.points();
            // pln("FOUND!!!"; #r);
            return r;
        }
        return null;
    }

    final private bool navigate(point start, point end, Path root) { 

        /// Find all possible routes from the start point
        var cluster = this.lineIndex.get(getKeyFor(start));
        if (!cluster) { 
            return false; 
        }

        /// Calculate and sort the distances from the possible routes towards the endpoint
        sorted double->ClusterInfo rawDistances();
        for (l in cluster.lines) { 
            if (l.visited) { continue; }
            var cost = this.getCost(l.l.p0, l.l.p1, end);
            rawDistances.put(cost.f, l);
        }

        /// Traverse the tree hopefully finding the best solution
        // pln("?????????????????????????????????????????????");
        if (!rawDistances.any) { 
            return false;
        }
        // pln(#rawDistances);
        for (cost, l in rawDistances) if (!l.visited) { 
            var newPath = root.newPath(l.l);
            if (!newPath) { 
                continue; 
            }
            l.visited = true;
            if ((l.l.p1 == end) or this.navigate(l.l.p1, end, newPath)
                or (l.l.p0 == end) or this.navigate(l.l.p0, end, newPath)) {
                return true;
            }
        }
        
        return false;
    }

    final private NodeInfo getCost(point from, point to, point end) { 
        return new NodeInfo(from.distance(to), to.distance(end));
    }
}

public class AweLineNetwork {
   private line[] lines;
   private str->point[] connections();

   public constructor(line[] lines) {
       this.lines = lines;

       this.indexLines();
   }   

   extend private void indexLines() {
       for (cableLine in this.lines) {
           this.index(cableLine.p0, cableLine.p1);
           this.index(cableLine.p1, cableLine.p0);
       }
   }

   extend private void index(point p0, point p1) {
       var key = p0.toS();
       
       if (key !in this.connections) {
           this.connections.put(key, new point[]());
       }

       if (p1 !in this.connections.get(key)) {
           this.connections.get(key) << p1;
       }
   }

   //lists possible next moves for a point in the network
   extend private point[] connectables(point p) {
       return this.connections.get(p.toS());
   }

   extend public AweLineRoute shortestRoute(point start, point end) {
       int attempts = 1000;
       double bestCost = maxDouble;
       AweLineRoute bestRoute;

       for (i in 1..attempts) {
           var route = this.aRoute(..);
           
           if (route.cost < bestCost) {
               bestCost = route.cost;
               bestRoute = route;
           }
       }

       return bestRoute;
   }

   extend public AweLineRoute shortestRoute(point start, line l) {
       AweLineRoute route = this.shortestRoute(start, l.p0);
       
       if (l !in route.lines) {
           route.lines << l;
       }

       return route;
   }

   extend private point randomConnectable(point currentPoint) {
       point[] possibilities = this.connectables(currentPoint);

       int randomIndex = randD(possibilities.count).int;
       
       return possibilities[randomIndex];
   }

   extend private AweLineRoute aRoute(point start, point end) {
       point current = start;
       AweLineRoute route();

       route.points << current;
       
       while (current != end) {
           var next = randomConnectable(current);

           route.cost += current.distance(next);
           route.lines << line(current, next);
           route.points << next;
           
           current = next;
       }
       
       return route;
   }
}